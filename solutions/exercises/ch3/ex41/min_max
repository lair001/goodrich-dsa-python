#!/usr/bin/env python3

# ch3/ex41
from collections import deque

from solutions.libs.utils.argv import parse_int_list


def min_max(int_seq):
    # if you don't like using deque because the book hasn't introduced
    # it yet, then you can keep left and right pointers for the min and
    # max candidate lists and increment or decrement them as appropriate.
    min_candidates = deque()
    max_candidates = deque()

    # n // 2 comparisons
    for i in range(1, len(int_seq), 2):
        if int_seq[i] < int_seq[i - 1]:
            min_candidates.append(int_seq[i])
            max_candidates.append(int_seq[i - 1])
        else:
            min_candidates.append(int_seq[i - 1])
            max_candidates.append(int_seq[i])

    # oddness test
    # Adds 1 comparison if the list length is odd
    if len(int_seq) & 1 == 1:
        if int_seq[-1] < min_candidates[-1]:
            min_candidates.pop()
            min_candidates.append(int_seq[-1])
        else:
            max_candidates.append(int_seq[-1])

    # n//2 - 1 comparisons
    while len(min_candidates) > 1:
        if min_candidates[0] < min_candidates[-1]:
            min_candidates.pop()
        else:
            min_candidates.popleft()

    # n/2 - 1 comparisons if the list length is odd and the last item was added to max candidates
    # n//2 - 1 comparisons otherwise
    while len(max_candidates) > 1:
        if max_candidates[0] > max_candidates[-1]:
            max_candidates.pop()
        else:
            max_candidates.popleft()

    return min_candidates[0], max_candidates[0]


if __name__ == "__main__":
    min_max = min_max(parse_int_list(1)[0])
    print("min: {}".format(min_max[0]))
    print("max: {}".format(min_max[1]))
