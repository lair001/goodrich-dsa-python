#!/usr/bin/env python3

# ch5/ex6

from solutions.vendor.ch05.dynamic_array import DynamicArray as Ch5DynamicArray


class DynamicArray(Ch5DynamicArray):

    def _resize(self, c, k=float('inf')):
        """Resize internal array to capacity c."""
        B = self._make_array(c)  # new (bigger) array
        for i in range(self._n):  # for each existing value
            B[i + 1 if i >= k else i] = self._A[i]
        self._A = B  # use the bigger array
        self._capacity = c

    def insert(self, k, value):
        """Insert value at index k, shifting subsequent values rightward."""
        # (for simplicity, we assume 0 <= k <= n in this verion)
        if self._n == self._capacity:  # not enough room
            self._resize(2 * self._capacity, k)  # so double capacity
        else:
            for j in range(self._n, k, -1):  # shift rightmost first
                self._A[j] = self._A[j - 1]
        self._A[k] = value  # store newest element
        self._n += 1

    def __str__(self):
        s = ["[ "]
        for i in range(self._n):
            s.append(str(self._A[i]))
            s.append(' ')
        s.append("]")
        return ''.join(s)


if __name__ == "__main__":
    a = DynamicArray()
    for i in range(7):
        a.append(i)
    print(a)
    print("insert 5 at index 2")
    a.insert(2, 5)
    print(a)
    print("insert 9 at index 5")
    a.insert(5, 9)
    print(a)
