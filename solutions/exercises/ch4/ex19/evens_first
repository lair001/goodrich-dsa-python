#!/usr/bin/env python3

# ch4/ex19

from solutions.libs.utils.argv import parse_int_list


def evens_first(int_list):
    return _evens_first(int_list, 0, len(int_list) - 1)


def _evens_first(int_list, lo, hi):
    if lo >= hi:
        return int_list
    # This uses a bitwise operator to test for evenness by checking the least
    # significant bit. It's faster than using modulo. However, if you don't
    # understand this concept, you should use something you do understand instead.
    # Like modulo (hopefully).
    elif int_list[lo] & 1 == 0:
        return _evens_first(int_list, lo + 1, hi)
    elif int_list[hi] & 1 == 0:
        int_list[lo], int_list[hi] = int_list[hi], int_list[lo]
        return _evens_first(int_list, lo + 1, hi - 1)
    else:
        return _evens_first(int_list, lo, hi - 1)


if __name__ == "__main__":
    print(evens_first(parse_int_list(1)[0]))
