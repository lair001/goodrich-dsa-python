#!/usr/bin/env python3

# ch2/ex13

from numbers import Real
from sys import argv
from solutions.vendor.ch02.vector import Vector as Ch2Vector
from solutions.libs.utils.argv import parse_int_list


class Vector(Ch2Vector):
    def __mul__(self, scalar):
        """Return scalar multiplication result."""
        return self.__scalar_multiplication(scalar)

    def __rmul__(self, scalar):
        """Return scalar multiplication result."""
        return self.__scalar_multiplication(scalar)

    def __scalar_multiplication(self, scalar):
        """Return scalar multiplication result."""
        if isinstance(scalar, Real):
            result = Vector(len(self))
            for i in range(len(self)):
                result[i] = self[i] * scalar
            return result
        else:
            return NotImplemented


if __name__ == "__main__":
    if argv[1].lstrip('-+').isdigit():
        scalar = int(argv[1])
    else:
        scalar = float(argv[1])
    seq_v = parse_int_list(2)[0]

    vector_v = Vector(len(seq_v))
    for i in range(len(vector_v)):
        vector_v[i] = seq_v[i]

    print("%s * %s = %s" % (scalar, vector_v, scalar * vector_v))
    print("%s * %s = %s" % (vector_v, scalar, vector_v * scalar))
