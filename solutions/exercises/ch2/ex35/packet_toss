#!/usr/bin/env python3

# ch2/ex35

import random
import textwrap
from sys import stdout
import time
import uuid
from collections import deque
from random import randint


class Network:

    def __init__(self):
        self._senders = {}
        self._receivers = {}

    def register(self, computer):
        if computer.get_id() not in self._senders.keys():
            self._senders[computer.get_id()] = {}
        if computer.get_id() not in self._receivers.keys():
            self._receivers[computer.get_id()] = {}

    def _validate_sender(self, sender):
        if sender.get_id() not in self._senders.keys():
            raise ValueError("{} is not a registered sender on this network!".format(sender))

    def _validate_receiver(self, receiver):
        if receiver.get_id() not in self._receivers.keys():
            raise ValueError("{} is not a registered receiver on this network!".format(receiver))

    def _validate_outgoing_connection(self, sender, receiver):
        self._validate_sender(sender)
        self._validate_receiver(receiver)
        if receiver.get_id() not in self._senders[sender.get_id()].keys() \
                or not isinstance(self._senders[sender.get_id()][receiver.get_id()], deque):
            raise ValueError("{} has not established an outgoing connection to {}", sender.get_id, receiver.get_id)

    def _validate_incoming_connection(self, receiver, sender):
        self._validate_sender(sender)
        self._validate_receiver(receiver)
        if sender.get_id() not in self._receivers[receiver.get_id()].keys() \
                or not isinstance(self._receivers[receiver.get_id()][sender.get_id()], deque):
            raise ValueError("{} has not established an incoming connection from {}", receiver.get_id, sender.get_id)

    def establish_connection(self, computer_a, computer_b):
        self._validate_sender(computer_a)
        self._validate_receiver(computer_a)

        self._validate_sender(computer_b)
        self._validate_receiver(computer_b)

        packet_queue_for_a_to_b = deque()
        packet_queue_for_b_to_a = deque()

        self._senders[computer_a.get_id()][computer_b.get_id()] = packet_queue_for_a_to_b
        self._receivers[computer_b.get_id()][computer_a.get_id()] = packet_queue_for_a_to_b

        self._senders[computer_b.get_id()][computer_a.get_id()] = packet_queue_for_b_to_a
        self._receivers[computer_a.get_id()][computer_b.get_id()] = packet_queue_for_b_to_a

    def send_packet(self, sender, receiver, ppacket):
        self._validate_outgoing_connection(sender, receiver)
        self._senders[sender.get_id()][receiver.get_id()].append(ppacket)

    def receive_packet(self, receiver, sender):
        self._validate_incoming_connection(receiver, sender)
        if len(self._receivers[receiver.get_id()][sender.get_id()]) > 0:
            return self._receivers[receiver.get_id()][sender.get_id()].popleft()


class Computer:

    def __init__(self, name, network):
        self._name = name
        self._outgoing_packets = {}
        self._id = uuid.uuid4().hex
        network.register(self)
        self._network = network

    def get_name(self):
        return self._name

    def get_id(self):
        return self._id

    def generate_outgoing_packets_for(self, receiver):
        if receiver.get_id() not in self._outgoing_packets.keys():
            self._outgoing_packets[receiver.get_id()] = deque()
        for _ in range(randint(1, 8)):
            self._outgoing_packets[receiver.get_id()].append(format(random.getrandbits(1024), 'X'))

    def send_packet_to(self, receiver):
        if receiver.get_id() not in self._outgoing_packets.keys():
            self._outgoing_packets[receiver.get_id()] = deque()
        if len(self._outgoing_packets[receiver.get_id()]) > 0:
            self._network.send_packet(self, receiver, self._outgoing_packets[receiver.get_id()].popleft())

    def read_packet_from(self, sender):
        return self._network.receive_packet(self, sender)

    def connect_to(self, computer):
        self._network.establish_connection(self, computer)


def simulate_sender_receiver(sender, receiver, pckt_gen_prob_per_cycle):
    if random.random() < pckt_gen_prob_per_cycle:
        sender.generate_outgoing_packets_for(receiver)
    sender.send_packet_to(receiver)
    packet = receiver.read_packet_from(sender)
    if packet is not None:
        print()
        print("{} reads a packet from {}:".format(receiver.get_name(), sender.get_name()))
        print(textwrap.fill(packet))


if __name__ == "__main__":
    skynet = Network()
    alice = Computer("Alice", skynet)
    bob = Computer("Bob", skynet)

    alice.connect_to(bob)
    alice.generate_outgoing_packets_for(bob)

    while True:
        simulate_sender_receiver(alice, bob, 0.03)
        simulate_sender_receiver(bob, alice, 0.02)
        stdout.flush()
        time.sleep(0.2)
