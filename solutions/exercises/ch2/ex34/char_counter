#!/usr/bin/env python3

# ch2/ex34

from sys import argv
from os import linesep as newline
from os import path as os_path


class CharacterCounter:
    _bar_char = '#'

    def __init__(self, s):
        self._char_counts = [0] * 26;

        self._max_count = 0
        for char in s:
            index = self.char_to_index(char)
            if isinstance(index, int):
                self._char_counts[index] += 1
                self._max_count = max(self._max_count, self._char_counts[index])

    def char_to_index(self, char):
        if 65 <= ord(char) <= 90:
            return ord(char) - 65
        elif 97 <= ord(char) <= 122:
            return ord(char) - 97

    def index_to_char(self, index):
        return chr(index + 65)

    def get_horizontal_barchart(self):
        barchart = ""
        for i in range(len(self._char_counts)):
            barchart += self.index_to_char(i) + " " + self._char_counts[i] * self._bar_char + newline
        return barchart

    def get_vertical_barchart(self):
        barchart = ""
        for i in range(self._max_count):
            for j in range(len(self._char_counts)):
                barchart += " " + self._bar_char if self._max_count - i <= self._char_counts[j] else "  "
            barchart += newline
        for j in range(26):
            barchart += " " + self.index_to_char(j)
        barchart += newline
        return barchart


if __name__ == "__main__":
    show_horizontal = len(argv) < 2 or argv[1] == "t"
    show_vertical = len(argv) > 2 and argv[2] == "t"
    path = argv[3] if len(argv) > 3 else os_path.join(os_path.dirname(__file__), "prompt.md")

    doc = open(path, "r")
    char_counter = CharacterCounter("".join(doc.readlines()))
    doc.close()
    print()

    if show_vertical:
        print(char_counter.get_vertical_barchart())

    if show_horizontal:
        print(char_counter.get_horizontal_barchart())
